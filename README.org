#+TITLE: McCarthy's Lisp Explorer
#+AUTHOR: Aidan Pace <apace@defrecord.com>, Jason Walsh <j@wal.sh>
#+DATE: [2025-05-05 Mon]

* Introduction

This repository contains an exploration of John McCarthy's seminal 1960 paper "Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I" - the paper that introduced Lisp to the world.

Through a practical implementation in Guile Scheme, we explore the core concepts described in McCarthy's original paper, helping to demystify this foundational work in computer science.

* Repository Structure

The repository is organized as follows:

#+begin_src bash
.
├── docs/                  # Documentation
│   ├── mccarthy-paper-notes.md
│   ├── implementation-guide.md
│   └── project-structure.mmd
├── examples/              # Example implementations
│   ├── hello-world.scm
│   ├── factorial.scm
│   └── mccarthy-examples.scm
├── resources/             # Original paper and resources
│   └── recursive.pdf      # McCarthy's original paper
├── src/                   # Core implementation
│   ├── s-expressions.scm  # S-expression primitives
│   ├── core.scm           # Higher-level functions
│   └── evaluator.scm      # The universal evaluator
├── tests/                 # Test suite
│   ├── test-core.scm
│   └── test-evaluator.scm
├── READING_GUIDE.org      # Guide to reading McCarthy's paper
├── EXERCISES.org          # Exercises for deepening understanding
├── interactive-examples.scm # Interactive demonstrations
├── run-all.scm            # Script to verify implementation
├── Makefile               # Project automation
└── README.org             # This file
#+end_src

* Getting Started

** Prerequisites

- GNU Guile Scheme (3.0 or later recommended)
- GNU Make (for using the Makefile)
- Coq (for formal verification)
- Emacs (for org-mode files and tangling)
- pdfpc (optional, for presenting slides)

** Setup

1. Clone this repository
2. Run the setup target to download McCarthy's paper and create the directories:

#+begin_src bash
gmake setup
#+end_src

3. Verify the implementation:

#+begin_src bash
gmake run-all
#+end_src

* Learning Path

To get the most out of this exploration of McCarthy's Lisp, we recommend the following learning path:

1. Start with the =READING_GUIDE.org= to understand how to approach McCarthy's paper
2. Download and read McCarthy's original paper (=resources/recursive.pdf=)
3. Run =interactive-examples.scm= to see the concepts demonstrated
4. Explore the source code in the =src/= directory
5. Work through the exercises in =EXERCISES.org= to deepen your understanding

** Reading McCarthy's Paper

McCarthy's original paper can be challenging to read. Our =READING_GUIDE.org= provides:
- A suggested reading order
- Explanations of key concepts
- Notes on challenging sections
- Connections between the paper and our implementation

** Interactive Examples

The =interactive-examples.scm= script demonstrates the key concepts from McCarthy's paper:
- Basic S-expressions and primitives
- Recursive functions
- List processing functions
- The universal evaluator (apply/eval)

Run it with:

#+begin_src bash
gmake examples
#+end_src

Or to run a specific example:

#+begin_src bash
gmake GUILE_SCRIPT=interactive-examples.scm run-script
#+end_src

** Exercises

The =EXERCISES.org= file contains a series of exercises, from beginner to advanced, to help you deepen your understanding of McCarthy's Lisp. Work through these exercises to gain mastery of the concepts.

You can run the exercises with:

#+begin_src bash
gmake org-exercises
#+end_src

** Running Tests

You can run the tests to verify the implementation:

#+begin_src bash
gmake test            # Run all tests (Scheme and Coq)
gmake scheme-test     # Run only Scheme tests
gmake coq-test        # Run only Coq tests
gmake trace           # Run tests with tracing enabled
#+end_src

* Implementation Notes

This implementation focuses on clarity rather than efficiency, prioritizing a direct correspondence with McCarthy's original description. Some key implementation details:

- The five primitive functions (atom, eq, car, cdr, cons) are implemented as described in section 3c
- We use dotted-pair notation for S-expressions, as in the original paper
- The universal evaluator (eval/apply) is implemented as described in section 3f

** Presentation

The repository includes a presentation that can be used for teaching about McCarthy's Lisp. You can:

#+begin_src bash
gmake presentation.pdf  # Build the presentation PDF
gmake present           # Start the presentation (uses pdfpc if available)
gmake presentation-tangle # Tangle code blocks from the presentation
#+end_src

* References

- McCarthy, J. (1960). Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I.
- McCarthy, J. (1978). History of LISP. ACM SIGPLAN Notices, 13(8), 217-223.
- Graham, P. (2008). The Roots of Lisp.
- Abelson, H., & Sussman, G. J. (1996). Structure and Interpretation of Computer Programs.

* License

This project is released under the MIT License.
