#+TITLE: McCarthy's LISP Explorer
#+AUTHOR: 
#+DATE: 
#+OPTIONS: toc:2

This repository contains an implementation of John McCarthy's original
LISP language as described in his 1960 paper "Recursive Functions of
Symbolic Expressions and Their Computation by Machine, Part I."

** About the Paper

McCarthy's groundbreaking 1960 paper introduced:
- Symbolic expressions (S-expressions)
- Recursive functions as a programming paradigm 
- The universal evaluator (eval/apply)
- The concept of "code as data"

These concepts laid the foundation for functional programming and
influenced numerous programming languages.

** Repository Structure

#+begin_src 
.
├── src
│   ├── s-expressions.scm  # Implements the five primitive operations
│   ├── core.scm           # Higher-level functions from the paper
│   ├── evaluator.scm      # The eval/apply evaluator
│   └── primitives.scm     # Additional primitive functions
├── examples
│   ├── hello-world.scm    # Simple introduction to S-expressions
│   ├── factorial.scm      # Factorial implementation
│   └── mccarthy-examples.scm # Examples from the paper
├── tests
│   ├── test-core.scm      # Tests for core functions
│   └── test-evaluator.scm # Tests for the evaluator
├── docs
│   ├── mccarthy-paper-notes.org  # Notes on the paper
│   ├── implementation-guide.org  # Implementation guide
│   └── workshop-schedule.org     # One-day tutorial schedule
├── resources
│   └── recursive.pdf      # McCarthy's original 1960 paper
├── mccarthy-lisp-explorer.el # Emacs support library
└── run-all.scm            # Script to run all tests and examples
#+end_src

** Getting Started

1. Ensure you have Guile Scheme installed:

   #+begin_src sh
   # FreeBSD
   pkg install guile3

   # Ubuntu/Debian
   sudo apt install guile-3.0

   # macOS
   brew install guile
   #+end_src

2. Set up the project structure and download resources:

   #+begin_src sh
   gmake setup
   #+end_src

3. Run all tests and examples:

   #+begin_src sh
   ./run-all.scm
   #+end_src

4. Explore individual examples:

   #+begin_src sh
   guile3 examples/hello-world.scm
   guile3 examples/factorial.scm
   #+end_src

** Emacs Integration

This project includes Emacs support for a better development experience:

1. Ensure you have Emacs with Geiser installed:

   #+begin_src emacs-lisp
   ;; In Emacs
   M-x package-install RET geiser RET
   M-x package-install RET geiser-guile RET
   #+end_src

2. The project includes a =.dir-locals.el= file that configures Geiser to use Guile 3.

3. Load the custom Elisp library for additional functionality:

   #+begin_src emacs-lisp
   ;; In Emacs
   M-x load-file RET mccarthy-lisp-explorer.el RET
   M-x mccarthy-lisp-explorer-mode RET
   #+end_src

4. Use the custom keybindings:

   | Keybinding  | Function                     |
   |-------------+------------------------------|
   | =C-c C-m o= | Open McCarthy's paper        |
   | =C-c C-m e= | Evaluate a Lisp expression   |
   | =C-c C-m i= | Insert a template function   |

** Workshop

This repository is designed for a one-day tutorial on McCarthy's LISP.
See =docs/workshop-schedule.org= for the suggested schedule.

** References

- [[https://www-formal.stanford.edu/jmc/recursive.pdf][McCarthy, J. (1960). Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I.]]
- McCarthy, J. (1978). History of LISP. ACM SIGPLAN Notices, 13(8), 217-223.
- Graham, P. (2008). [[http://www.paulgraham.com/rootsoflisp.html][The Roots of Lisp]].

** License

MIT
